#!/usr/bin/env ruby
# frozen_string_literal: true

require 'dry/cli'
require_relative '../config/setup'
require_relative '../pipeline_runner'

# The PlumberCli module serves as the main entry point for the command-line interface (CLI) of the Plumber application.
class PlumberCli
  extend Dry::CLI::Registry

  # The Ls class represents a subcommand for listing all available pipelines and their descriptions.
  class ListPipelines < Dry::CLI::Command
    desc 'print all the available pipelines'

    def call(*)
      pipelines = PipelineRunner.load_pipeline_configurations
      puts 'Available Pipelines'
      print 'Name'.ljust(30), '| ', 'Description'.ljust(30), "\n"
      print '-' * 100,  "\n"
      pipelines.each do |filename, configuration|
        print filename.ljust(30), '| ', configuration[0][:name].rjust(30), "\n"
      end
    end
  end

  # The Run class represents a subcommand for executing pipelines.
  # It accepts an optional list of pipeline names to run.
  class Run < Dry::CLI::Command
    desc 'run the pipeline'
    argument :pipeline_names, desc: 'name of pipelines to run', type: :array, required: false
    example '                         # runs all pipelines'
    example 'pipeline_1 pipeline_2    # runs only the specified pipelines'

    def call(pipeline_names: [], **)
      PipelineRunner.new(pipeline_names).run_pipelines
    end
  end

  # The Inti class represents a subcommand for initializing the project.
  class Initialize < Dry::CLI::Command
    desc 'initialize the project, it create the necessary files,'
    def call(*)
      puts 'Creating .env file'
      FileUtils.cp('.env.template', '.env') unless File.exist?('.env')
    end
  end

  register 'ls', ListPipelines, aliases: %w[ls -ls --ls]
  register 'run', Run
  register 'init', Initialize
end

Dry::CLI.new(PlumberCli).call
